Complete src/Completion.res 1:11
posCursor:[1:11] posNoWhite:[1:10] Found expr:[1:3->1:11]
Pexp_ident MyList.m:[1:3->1:11]
Completable: Cpath Value[MyList, m]
[{
    "label": "mapReverse",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\n  Equivalent to:\n\n  ```res\n  map(someList, f)->reverse\n  ```\n\n  ```res example\n  list{3, 4, 5}->Belt.List.mapReverse(x => x * x) /* list{25, 16, 9} */\n  ```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "makeBy",
    "kind": 12,
    "tags": [],
    "detail": "(int, int => 'a) => t<'a>",
    "documentation": {"kind": "markdown", "value": "\nReturn a list of length `numItems` with element `i` initialized with `f(i)`.\nReturns an empty list if `numItems` is negative.\n\n```res example\nBelt.List.makeBy(5, i => i) // list{0, 1, 2, 3, 4}\n\nBelt.List.makeBy(5, i => i * i) // list{0, 1, 4, 9, 16}\n```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "make",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => t<'a>",
    "documentation": {"kind": "markdown", "value": "\n  Returns a list of length `numItems` with each element filled with value `v`. Returns an empty list if `numItems` is negative.\n\n  ```res example\n  Belt.List.make(3, 1) // list{1, 1, 1}\n  ```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mapReverse2U",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, t<'b>, (. 'a, 'b) => 'c) => t<'c>",
    "documentation": {"kind": "markdown", "value": " Uncurried version of [mapReverse2](#mapReverse2). "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "map",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\n  Returns a new list with `f` applied to each element of `someList`.\n\n  ```res example\n  list{1, 2}->Belt.List.map(x => x + 1) // list{3, 4}\n  ```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mapWithIndexU",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (. int, 'a) => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": " Uncurried version of [mapWithIndex](#mapWithIndex). "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mapU",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (. 'a) => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": " Uncurried version of [map](#map). "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "makeByU",
    "kind": 12,
    "tags": [],
    "detail": "(int, (. int) => 'a) => t<'a>",
    "documentation": {"kind": "markdown", "value": " Uncurried version of [makeBy](#makeBy) "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mapReverse2",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, t<'b>, ('a, 'b) => 'c) => t<'c>",
    "documentation": {"kind": "markdown", "value": "\n  Equivalent to: `zipBy(xs, ys, f)->reverse`\n\n  ```res example\n\n  Belt.List.mapReverse2(list{1, 2, 3}, list{1, 2}, (a, b) => a + b) // list{4, 2}\n  ```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mapWithIndex",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (int, 'a) => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\n  Applies `f` to each element of `someList`.\n  Function `f` takes two arguments: the index starting from 0 and the element from `someList`, in that order.\n\n  ```res example\n  list{1, 2, 3}->Belt.List.mapWithIndex((index, x) => index + x) // list{1, 3, 5}\n  ```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mapReverseU",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, (. 'a) => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": " Uncurried version of [mapReverse](#mapReverse). "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 3:9
posCursor:[3:9] posNoWhite:[3:8] Found expr:[3:3->3:9]
Pexp_ident Array.:[3:3->3:9]
Completable: Cpath Value[Array, ""]
[{
    "label": "fold_left",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => 'a, 'a, array<'b>) => 'a",
    "documentation": {"kind": "markdown", "value": " [Array.fold_left f x a] computes\n   [f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)],\n   where [n] is the length of the array [a]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "concat",
    "kind": 12,
    "tags": [],
    "detail": "list<array<'a>> => array<'a>",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.append}, but concatenates a list of arrays. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mapi",
    "kind": 12,
    "tags": [],
    "detail": "((int, 'a) => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.map}, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "exists",
    "kind": 12,
    "tags": [],
    "detail": "('a => bool, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [Array.exists p [|a1; ...; an|]] checks if at least one element of\n    the array satisfies the predicate [p]. That is, it returns\n    [(p a1) || (p a2) || ... || (p an)].\n    @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "for_all",
    "kind": 12,
    "tags": [],
    "detail": "('a => bool, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [Array.for_all p [|a1; ...; an|]] checks if all elements of the array\n   satisfy the predicate [p]. That is, it returns\n   [(p a1) && (p a2) && ... && (p an)].\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "copy",
    "kind": 12,
    "tags": [],
    "detail": "array<'a> => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.copy a] returns a copy of [a], that is, a fresh array\n   containing the same elements as [a]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "iter2",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => unit, array<'a>, array<'b>) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.iter2 f a b] applies function [f] to all the elements of [a]\n   and [b].\n   Raise [Invalid_argument] if the arrays are not the same size.\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "to_list",
    "kind": 12,
    "tags": [],
    "detail": "array<'a> => list<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.to_list a] returns the list of all the elements of [a]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "stable_sort",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'a) => int, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.sort}, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.\n\n   The current implementation uses Merge Sort. It uses [n/2]\n   words of heap space, where [n] is the length of the array.\n   It is usually faster than the current implementation of {!Array.sort}.\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "iteri",
    "kind": 12,
    "tags": [],
    "detail": "((int, 'a) => unit, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.iter}, but the\n   function is applied with the index of the element as first argument,\n   and the element itself as second argument. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "memq",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.mem}, but uses physical equality instead of structural\n   equality to compare array elements.\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "map2",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => 'c, array<'a>, array<'b>) => array<'c>",
    "documentation": {"kind": "markdown", "value": " [Array.map2 f a b] applies function [f] to all the elements of [a]\n   and [b], and builds an array with the results returned by [f]:\n   [[| f a.(0) b.(0); ...; f a.(Array.length a - 1) b.(Array.length b - 1)|]].\n   Raise [Invalid_argument] if the arrays are not the same size.\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "set",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, 'a) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.set a n x] modifies array [a] in place, replacing\n   element number [n] with [x].\n   You can also write [a.(n) <- x] instead of [Array.set a n x].\n\n   Raise [Invalid_argument \"index out of bounds\"]\n   if [n] is outside the range 0 to [Array.length a - 1]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "make",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.make n x] returns a fresh array of length [n],\n   initialized with [x].\n   All the elements of this new array are initially\n   physically equal to [x] (in the sense of the [==] predicate).\n   Consequently, if [x] is mutable, it is shared among all elements\n   of the array, and modifying [x] through one of the array entries\n   will modify all other entries at the same time.\n\n   Raise [Invalid_argument] if [n < 0] or [n > Sys.max_array_length].\n   If the value of [x] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]."},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "make_float",
    "kind": 12,
    "tags": [],
    "detail": "int => array<float>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.make_float] is an alias for {!Array.create_float}. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "fold_right",
    "kind": 12,
    "tags": [],
    "detail": "(('b, 'a) => 'a, array<'b>, 'a) => 'a",
    "documentation": {"kind": "markdown", "value": " [Array.fold_right f a x] computes\n   [f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))],\n   where [n] is the length of the array [a]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "sort",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'a) => int, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, {!Pervasives.compare} is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling [Array.sort], the\n   array is sorted in place in increasing order.\n   [Array.sort] is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.\n\n   The current implementation uses Heap Sort.  It runs in constant\n   stack space.\n\n   Specification of the comparison function:\n   Let [a] be the array and [cmp] the comparison function.  The following\n   must be true for all x, y, z in a :\n-   [cmp x y] > 0 if and only if [cmp y x] < 0\n-   if [cmp x y] >= 0 and [cmp y z] >= 0 then [cmp x z] >= 0\n\n   When [Array.sort] returns, [a] contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of [a] :\n-   [cmp a.(i) a.(j)] >= 0 if and only if i >= j\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "length",
    "kind": 12,
    "tags": [],
    "detail": "array<'a> => int",
    "documentation": {"kind": "markdown", "value": " Return the length (number of elements) of the given array. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "sub",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, int) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.sub a start len] returns a fresh array of length [len],\n   containing the elements number [start] to [start + len - 1]\n   of array [a].\n\n   Raise [Invalid_argument \"Array.sub\"] if [start] and [len] do not\n   designate a valid subarray of [a]; that is, if\n   [start < 0], or [len < 0], or [start + len > Array.length a]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "of_list",
    "kind": 12,
    "tags": [],
    "detail": "list<'a> => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.of_list l] returns a fresh array containing the elements\n   of [l]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "iter",
    "kind": 12,
    "tags": [],
    "detail": "('a => unit, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.iter f a] applies function [f] in turn to all\n   the elements of [a].  It is equivalent to\n   [f a.(0); f a.(1); ...; f a.(Array.length a - 1); ()]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "map",
    "kind": 12,
    "tags": [],
    "detail": "('a => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " [Array.map f a] applies function [f] to all the elements of [a],\n   and builds an array with the results returned by [f]:\n   [[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "unsafe_get",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int) => 'a",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "make_matrix",
    "kind": 12,
    "tags": [],
    "detail": "(int, int, 'a) => array<array<'a>>",
    "documentation": {"kind": "markdown", "value": " [Array.make_matrix dimx dimy e] returns a two-dimensional array\n   (an array of arrays) with first dimension [dimx] and\n   second dimension [dimy]. All the elements of this new matrix\n   are initially physically equal to [e].\n   The element ([x,y]) of a matrix [m] is accessed\n   with the notation [m.(x).(y)].\n\n   Raise [Invalid_argument] if [dimx] or [dimy] is negative or\n   greater than {!Sys.max_array_length}.\n   If the value of [e] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mem",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [mem a l] is true if and only if [a] is equal\n   to an element of [l].\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "get",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int) => 'a",
    "documentation": {"kind": "markdown", "value": " [Array.get a n] returns the element number [n] of array [a].\n   The first element has number 0.\n   The last element has number [Array.length a - 1].\n   You can also write [a.(n)] instead of [Array.get a n].\n\n   Raise [Invalid_argument \"index out of bounds\"]\n   if [n] is outside the range 0 to [(Array.length a - 1)]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "append",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, array<'a>) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.append v1 v2] returns a fresh array containing the\n   concatenation of the arrays [v1] and [v2]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "unsafe_set",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, 'a) => unit",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "create_matrix",
    "kind": 12,
    "tags": [],
    "detail": "(int, int, 'a) => array<array<'a>>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.create_matrix] is an alias for {!Array.make_matrix}. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "create_float",
    "kind": 12,
    "tags": [],
    "detail": "int => array<float>",
    "documentation": {"kind": "markdown", "value": " [Array.create_float n] returns a fresh float array of length [n],\n    with uninitialized data.\n    @since 4.03 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "create",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.create] is an alias for {!Array.make}. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "init",
    "kind": 12,
    "tags": [],
    "detail": "(int, int => 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.init n f] returns a fresh array of length [n],\n   with element number [i] initialized to the result of [f i].\n   In other terms, [Array.init n f] tabulates the results of [f]\n   applied to the integers [0] to [n-1].\n\n   Raise [Invalid_argument] if [n < 0] or [n > Sys.max_array_length].\n   If the return type of [f] is [float], then the maximum\n   size is only [Sys.max_array_length / 2]."},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "fast_sort",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'a) => int, array<'a>) => unit",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.sort} or {!Array.stable_sort}, whichever is faster\n    on typical input.\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "fill",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, int, 'a) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.fill a ofs len x] modifies the array [a] in place,\n   storing [x] in elements number [ofs] to [ofs + len - 1].\n\n   Raise [Invalid_argument \"Array.fill\"] if [ofs] and [len] do not\n   designate a valid subarray of [a]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "blit",
    "kind": 12,
    "tags": [],
    "detail": "(array<'a>, int, array<'a>, int, int) => unit",
    "documentation": {"kind": "markdown", "value": " [Array.blit v1 o1 v2 o2 len] copies [len] elements\n   from array [v1], starting at element number [o1], to array [v2],\n   starting at element number [o2]. It works correctly even if\n   [v1] and [v2] are the same array, and the source and\n   destination chunks overlap.\n\n   Raise [Invalid_argument \"Array.blit\"] if [o1] and [len] do not\n   designate a valid subarray of [v1], or if [o2] and [len] do not\n   designate a valid subarray of [v2]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "Floatarray",
    "kind": 9,
    "tags": [],
    "detail": "module",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 5:10
posCursor:[5:10] posNoWhite:[5:9] Found expr:[5:3->5:10]
Pexp_ident Array.m:[5:3->5:10]
Completable: Cpath Value[Array, m]
[{
    "label": "mapi",
    "kind": 12,
    "tags": [],
    "detail": "((int, 'a) => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.map}, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "memq",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " Same as {!Array.mem}, but uses physical equality instead of structural\n   equality to compare array elements.\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "map2",
    "kind": 12,
    "tags": [],
    "detail": "(('a, 'b) => 'c, array<'a>, array<'b>) => array<'c>",
    "documentation": {"kind": "markdown", "value": " [Array.map2 f a b] applies function [f] to all the elements of [a]\n   and [b], and builds an array with the results returned by [f]:\n   [[| f a.(0) b.(0); ...; f a.(Array.length a - 1) b.(Array.length b - 1)|]].\n   Raise [Invalid_argument] if the arrays are not the same size.\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "make",
    "kind": 12,
    "tags": [],
    "detail": "(int, 'a) => array<'a>",
    "documentation": {"kind": "markdown", "value": " [Array.make n x] returns a fresh array of length [n],\n   initialized with [x].\n   All the elements of this new array are initially\n   physically equal to [x] (in the sense of the [==] predicate).\n   Consequently, if [x] is mutable, it is shared among all elements\n   of the array, and modifying [x] through one of the array entries\n   will modify all other entries at the same time.\n\n   Raise [Invalid_argument] if [n < 0] or [n > Sys.max_array_length].\n   If the value of [x] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]."},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "make_float",
    "kind": 12,
    "tags": [],
    "detail": "int => array<float>",
    "documentation": {"kind": "markdown", "value": " @deprecated [Array.make_float] is an alias for {!Array.create_float}. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "map",
    "kind": 12,
    "tags": [],
    "detail": "('a => 'b, array<'a>) => array<'b>",
    "documentation": {"kind": "markdown", "value": " [Array.map f a] applies function [f] to all the elements of [a],\n   and builds an array with the results returned by [f]:\n   [[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "make_matrix",
    "kind": 12,
    "tags": [],
    "detail": "(int, int, 'a) => array<array<'a>>",
    "documentation": {"kind": "markdown", "value": " [Array.make_matrix dimx dimy e] returns a two-dimensional array\n   (an array of arrays) with first dimension [dimx] and\n   second dimension [dimy]. All the elements of this new matrix\n   are initially physically equal to [e].\n   The element ([x,y]) of a matrix [m] is accessed\n   with the notation [m.(x).(y)].\n\n   Raise [Invalid_argument] if [dimx] or [dimy] is negative or\n   greater than {!Sys.max_array_length}.\n   If the value of [e] is a floating-point number, then the maximum\n   size is only [Sys.max_array_length / 2]. "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "mem",
    "kind": 12,
    "tags": [],
    "detail": "('a, array<'a>) => bool",
    "documentation": {"kind": "markdown", "value": " [mem a l] is true if and only if [a] is equal\n   to an element of [l].\n   @since 4.03.0 "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 15:17
posCursor:[15:17] posNoWhite:[15:16] Found expr:[15:12->15:17]
Pexp_ident Dep.c:[15:12->15:17]
Completable: Cpath Value[Dep, c]
[{
    "label": "customDouble",
    "kind": 12,
    "tags": [1],
    "detail": "int => int",
    "documentation": {"kind": "markdown", "value": "Deprecated: Use customDouble instead\n\nSome doc comment"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 23:20
posCursor:[23:20] posNoWhite:[23:19] Found expr:[23:11->23:20]
Pexp_apply ...[23:11->23:18] ()
Completable: CnamedArg(Value[Lib, foo], "", [])
Found type for function (~age: int, ~name: string) => string
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 26:13
posCursor:[26:13] posNoWhite:[26:12] Found expr:[26:3->26:13]
Completable: Cpath array->m
[{
    "label": "Js.Array2.mapi",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, ('a, int) => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\nApplies the function (the second argument) to each item in the array, returning\na new array. The function acceps two arguments: an item from the array and its\nindex number. The result array does not have to have elements of the same type\nas the input array. See\n[`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\non MDN.\n\n```res example\n// multiply each item in array by its position\nlet product = (item, index) => item * index\nJs.Array2.mapi([10, 11, 12], product) == [0, 11, 24]\n```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "Js.Array2.map",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, 'a => 'b) => t<'b>",
    "documentation": {"kind": "markdown", "value": "\nApplies the function (the second argument) to each item in the array, returning\na new array. The result array does not have to have elements of the same type\nas the input array. See\n[`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\non MDN.\n\n```res example\nJs.Array2.map([12, 4, 8], x => x * x) == [144, 16, 64]\nJs.Array2.map([\"animal\", \"vegetable\", \"mineral\"], Js.String.length) == [6, 9, 7]\n```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 29:13
posCursor:[29:13] posNoWhite:[29:12] Found expr:[29:3->29:13]
Completable: Cpath string->toU
[{
    "label": "Js.String2.toUpperCase",
    "kind": 12,
    "tags": [],
    "detail": "t => t",
    "documentation": {"kind": "markdown", "value": "\n`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ß\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```res example\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`Straße`) == `STRASSE`\nJs.String2.toUpperCase(`πς`) == `ΠΣ`\n```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 34:8
posCursor:[34:8] posNoWhite:[34:7] Found expr:[34:3->34:8]
Completable: Cpath Value[op]->e
[{
    "label": "Belt.Option.eqU",
    "kind": 12,
    "tags": [],
    "detail": "(option<'a>, option<'b>, (. 'a, 'b) => bool) => bool",
    "documentation": {"kind": "markdown", "value": "\n   Uncurried version of `eq`\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "Belt.Option.eq",
    "kind": 12,
    "tags": [],
    "detail": "(option<'a>, option<'b>, ('a, 'b) => bool) => bool",
    "documentation": {"kind": "markdown", "value": "\n   Evaluates two optional values for equality with respect to a predicate\n   function. If both `optValue1` and `optValue2` are `None`, returns `true`.\n   If one of the arguments is `Some(value)` and the other is `None`, returns\n   `false`.\n\n   If arguments are `Some(value1)` and `Some(value2)`, returns the result of\n   `predicate(value1, value2)`; the predicate function must return a bool.\n\n   ```res example\n   let clockEqual = (a, b) => mod(a, 12) == mod(b, 12)\n\n   open Belt.Option\n\n   eq(Some(3), Some(15), clockEqual) /* true */\n\n   eq(Some(3), None, clockEqual) /* false */\n\n   eq(None, Some(3), clockEqual) /* false */\n\n   eq(None, None, clockEqual) /* true */\n   ```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 44:7
posCursor:[44:7] posNoWhite:[44:6] Found expr:[44:3->54:3]
Pexp_apply ...[50:9->50:10] (...[44:3->50:8], ...[51:2->54:3])
posCursor:[44:7] posNoWhite:[44:6] Found expr:[44:3->50:8]
Completable: Cpath Value[fa]->
[{
    "label": "ForAuto.abc",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "ForAuto.abd",
    "kind": 12,
    "tags": [],
    "detail": "(t, int) => t",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 47:21
posCursor:[47:21] posNoWhite:[47:20] Found expr:[47:3->47:21]
posCursor:[47:21] posNoWhite:[47:20] Found expr:[47:12->47:21]
Pexp_ident Js.Dict.u:[47:12->47:21]
Completable: Cpath Value[Js, Dict, u]
[{
    "label": "unsafeGet",
    "kind": 12,
    "tags": [],
    "detail": "(t<'a>, key) => 'a",
    "documentation": {"kind": "markdown", "value": "\n`Js.Dict.unsafeGet(key)` returns the value if the key exists, otherwise an `undefined` value is returned. Use this only when you are sure the key exists (i.e. when having used the `keys()` function to check that the key is valid).\n\n```res example\nJs.Dict.unsafeGet(ages, \"Fred\") == 49\nJs.Dict.unsafeGet(ages, \"Paul\") // returns undefined\n```\n"},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }, {
    "label": "unsafeDeleteKey",
    "kind": 12,
    "tags": [],
    "detail": "(. t<string>, string) => unit",
    "documentation": {"kind": "markdown", "value": " Experimental internal function "},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 59:30
posCursor:[59:30] posNoWhite:[59:29] Found expr:[59:15->59:30]
JSX <O.Comp:[59:15->59:21] second[59:22->59:28]=...[59:29->59:30]> _children:None
posCursor:[59:30] posNoWhite:[59:29] Found expr:[59:29->59:30]
Pexp_ident z:[59:29->59:30]
Completable: Cpath Value[z]
[{
    "label": "zzz",
    "kind": 12,
    "tags": [],
    "detail": "int",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 62:23
posCursor:[62:23] posNoWhite:[62:22] Found expr:[62:15->62:23]
JSX <O.Comp:[62:15->62:21] z[62:22->62:23]=...[62:22->62:23]> _children:None
Completable: Cjsx([O, Comp], z, [z])
[{
    "label": "zoo",
    "kind": 4,
    "tags": [],
    "detail": "option<int>",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 65:8
Attribute id:reac:[65:3->65:8] label:reac
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 68:10
posCursor:[68:10] posNoWhite:[68:9] Found expr:[0:-1->86:1]
Pexp_apply ...[80:6->80:7] (...[80:8->86:1])
Attribute id:react.let:[68:3->80:3] label:react.
Completable: Cdecorator(react.)
[{
    "label": "component",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": {"kind": "markdown", "value": "The `@react.component` decorator is used to annotate functions that are RescriptReact components.\n\nYou will need this decorator whenever you want to use a ReScript / React component in ReScript JSX expressions.\n\nNote: The `@react.component` decorator requires the react-jsx config to be set in your `bsconfig.json` to enable the required React transformations.\n\n[Read more and see examples in the documentation](https://rescript-lang.org/syntax-lookup#react-component-decorator)."},
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 71:27
posCursor:[71:27] posNoWhite:[71:26] Found expr:[71:11->71:27]
Pexp_apply ...[71:11->71:18] (~name71:20->71:24=...[71:20->71:24])
Completable: CnamedArg(Value[Lib, foo], "", [name])
Found type for function (~age: int, ~name: string) => string
[{
    "label": "age",
    "kind": 4,
    "tags": [],
    "detail": "int",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 74:26
posCursor:[74:26] posNoWhite:[74:25] Found expr:[74:11->74:26]
Pexp_apply ...[74:11->74:18] (~age74:20->74:23=...[74:20->74:23])
Completable: CnamedArg(Value[Lib, foo], "", [age])
Found type for function (~age: int, ~name: string) => string
[{
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 77:32
posCursor:[77:32] posNoWhite:[77:31] Found expr:[77:11->77:32]
Pexp_apply ...[77:11->77:18] (~age77:20->77:23=...[77:25->77:28])
Completable: CnamedArg(Value[Lib, foo], "", [age])
Found type for function (~age: int, ~name: string) => string
[{
    "label": "name",
    "kind": 4,
    "tags": [],
    "detail": "string",
    "documentation": null,
    "sortText": null,
    "insertText": null,
    "insertTextFormat": null
  }]

Complete src/Completion.res 82:5
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](Nolabel, ~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 90:13
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 95:24
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 99:7
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 104:17
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 110:5
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 113:24
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 120:7
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 125:18
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 151:6
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 157:8
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 159:9
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 162:6
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 169:16
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 172:16
posCursor:[172:16] posNoWhite:[172:15] Found type:[172:12->172:16]
Ptyp_constr Js.n:[172:12->172:16]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 174:20
posCursor:[174:20] posNoWhite:[174:19] Found type:[174:12->174:20]
Ptyp_constr ForAuto.:[174:12->174:20]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 179:13
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 182:17
Pmod_ident For:[182:14->182:17]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 190:11
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 202:6
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 205:6
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 208:6
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 221:22
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 224:37
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 227:46
posCursor:[227:46] posNoWhite:[227:45] Found expr:[227:3->0:-1]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 230:55
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 234:34
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 237:17
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 243:8
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 254:17
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 256:29
posCursor:[256:29] posNoWhite:[256:28] Found type:[256:13->256:29]
Ptyp_constr SomeLocalModule.:[256:13->256:29]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 261:33
posCursor:[261:33] posNoWhite:[261:32] Found type:[261:17->263:11]
Ptyp_constr SomeLocalModule.:[261:17->263:11]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 268:21
Ptype_variant unary SomeLocal:[268:12->268:21]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 271:20
posCursor:[271:20] posNoWhite:[271:19] Found pattern:[271:7->274:3]
posCursor:[271:20] posNoWhite:[271:19] Found type:[271:11->274:3]
Ptyp_constr SomeLocal:[271:11->274:3]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 275:15
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 281:22
posCursor:[281:22] posNoWhite:[281:21] Found type:[281:21->281:22]
Ptyp_constr s:[281:21->281:22]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 291:30
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 296:11
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 301:13
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 304:15
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 307:17
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 310:21
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 313:23
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 316:16
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 323:17
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 326:21
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 329:21
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 336:26
posCursor:[336:26] posNoWhite:[336:25] Found pattern:[336:20->338:5]
posCursor:[336:26] posNoWhite:[336:25] Found type:[336:23->338:5]
Ptyp_constr Res:[336:23->338:5]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 343:57
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Hover src/Completion.res 346:14
Nothing at that position. Now trying to use completion.
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
null

Hover src/Completion.res 349:17
Nothing at that position. Now trying to use completion.
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
null

Hover src/Completion.res 352:17
Nothing at that position. Now trying to use completion.
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
null

Complete src/Completion.res 355:23
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 362:8
posCursor:[362:8] posNoWhite:[362:7] Found pattern:[362:7->364:5]
posCursor:[362:8] posNoWhite:[362:7] Found pattern:[362:7->362:8]
Ppat_construct T:[362:7->362:8]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 373:21
posCursor:[373:21] posNoWhite:[373:20] Found pattern:[373:7->375:5]
posCursor:[373:21] posNoWhite:[373:20] Found pattern:[373:7->373:21]
Ppat_construct AndThatOther.T:[373:7->373:21]
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 378:24
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 381:38
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 384:24
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 389:12
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 397:14
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 402:25
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

Complete src/Completion.res 405:22
XXX Not found!
Completable: CtypedPattern(sourceType:Value[Lib, foo](~age, ~name), lookingToComplete:CNoContext, patternType:Destructure, prefix:"", pattern: [], seenIdents: [])
[]

